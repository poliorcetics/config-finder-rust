# Credits for the initial version of this file go to
# https://github.com/tokio-rs/tracing/blob/master/.github/workflows/CI.yml
name: CI

on:
  push:
    branches:
    - main
  pull_request: {}

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # Always deny warnings
  RUSTFLAGS: -D warnings
  # Always have color
  CARGO_TERM_COLOR: always

jobs:
  check:
    # Run `cargo check` first to ensure that the pushed code at least compiles.
    name: cargo check (stable)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Check
      run: cargo check --all --tests --benches

  check-msrv:
    name: cargo check (MSRV, 1.56.0)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@1.56.0
    - name: Check
      run: cargo check --all --tests --benches

  style:
    # Check style.
    name: cargo fmt
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: rustfmt
      run: cargo fmt --all -- --check

  clippy:
    # Check for any warnings.
    runs-on: ubuntu-latest
    needs: check
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Clippy
      run: cargo clippy --all --examples --tests --benches

  test:
    # Test against stable Rust across macOS, Windows, and Linux.
    name: "cargo test (stable on ${{ matrix.os }})"
    needs: check
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Run tests
      run: cargo test --lib
    - name: Run doctests
      run: cargo test --doc
